# Task ID: 11
# Title: Implement Login Page
# Status: pending
# Dependencies: 5
# Priority: high
# Description: Create a login page with Microsoft-branded login button that redirects to Azure AD for authentication.
# Details:
1. Create Login page component:
```tsx
// src/pages/LoginPage.tsx
import React from 'react';
import { useHistory, useLocation } from 'react-router-dom';
import { Button } from 'devextreme-react/button';
import { useAuth } from '../auth/AuthContext';
import './LoginPage.css';

const LoginPage: React.FC = () => {
  const { login, isAuthenticated } = useAuth();
  const history = useHistory();
  const location = useLocation<{ from: string }>();
  
  // Redirect if already authenticated
  React.useEffect(() => {
    if (isAuthenticated) {
      const from = location.state?.from || '/';
      history.replace(from);
    }
  }, [isAuthenticated, history, location]);
  
  const handleLogin = async () => {
    try {
      await login();
      // Redirect will happen automatically in the useEffect above
    } catch (error) {
      console.error('Login failed', error);
    }
  };
  
  return (
    <div className="login-container">
      <div className="login-box">
        <h2>FourSPM Application</h2>
        <p>Please sign in with your organizational account</p>
        
        <Button
          text="Sign in with Microsoft"
          icon="fab fa-microsoft"
          type="default"
          stylingMode="contained"
          onClick={handleLogin}
          className="ms-login-button"
        />
      </div>
    </div>
  );
};

export default LoginPage;
```

2. Add styles for the login page:
```css
/* src/pages/LoginPage.css */
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f5f5f5;
}

.login-box {
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  padding: 40px;
  text-align: center;
  width: 400px;
}

.login-box h2 {
  margin-top: 0;
  color: #333;
}

.login-box p {
  color: #666;
  margin-bottom: 30px;
}

.ms-login-button {
  width: 100%;
  margin-top: 20px;
  background-color: #0078d4 !important;
  border-color: #0078d4 !important;
}

.ms-login-button:hover {
  background-color: #106ebe !important;
  border-color: #106ebe !important;
}
```

3. Update the ProtectedRoute component to redirect to login:
```tsx
// src/auth/ProtectedRoute.tsx
import React from 'react';
import { Route, Redirect, RouteProps } from 'react-router-dom';
import { useAuth } from './AuthContext';

interface ProtectedRouteProps extends RouteProps {
  requiredPermission?: string;
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  requiredPermission,
  ...routeProps 
}) => {
  const { isAuthenticated, userRoles } = useAuth();
  
  if (!isAuthenticated) {
    return (
      <Redirect 
        to={{
          pathname: '/login',
          state: { from: routeProps.location?.pathname }
        }} 
      />
    );
  }
  
  // If no specific permission is required, just check authentication
  if (!requiredPermission) {
    return <Route {...routeProps} />;
  }
  
  // For system administrators, allow access to everything
  if (userRoles.includes('Application.Admin')) {
    return <Route {...routeProps} />;
  }
  
  // For permission-based access, check if user has the required permission
  // This is a simplified check - in a real app, you'd check against the permissions from the backend
  return <Route {...routeProps} />;
};
```

# Test Strategy:
1. Test login button triggers MSAL authentication
2. Verify redirect to Microsoft login page
3. Test successful login redirects to the intended page
4. Verify already authenticated users are automatically redirected
5. Test error handling during authentication failures
6. Verify the login page styling and responsiveness
7. Test that protected routes redirect to login when not authenticated

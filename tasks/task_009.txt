# Task ID: 9
# Title: Implement Role Management UI
# Status: in-progress
# Dependencies: 5, 6, 7
# Priority: medium
# Description: Create a grid-based interface for managing roles, including creation, editing, and deletion of roles.
# Details:
1. Create Role management page:
```tsx
// src/pages/RoleManagement.tsx
import React, { useEffect, useState } from 'react';
import { DataGrid, Column, Editing, Popup, Form, Button } from 'devextreme-react/data-grid';
import { Item } from 'devextreme-react/form';
import { confirm } from 'devextreme/ui/dialog';
import { useHistory } from 'react-router-dom';
import { getRoles, createRole, updateRole, deleteRole } from '../api/roleService';
import { Role } from '../types';
import { useAuth } from '../auth/AuthContext';
import { toast } from 'react-toastify';

const RoleManagement: React.FC = () => {
  const [roles, setRoles] = useState<Role[]>([]);
  const [loading, setLoading] = useState(true);
  const history = useHistory();
  const { userRoles } = useAuth();
  
  // Check if user has permission to edit roles
  const canEditRoles = userRoles.includes('Application.Admin');
  
  useEffect(() => {
    loadRoles();
  }, []);
  
  const loadRoles = async () => {
    try {
      setLoading(true);
      const data = await getRoles();
      setRoles(data);
    } catch (error) {
      toast.error('Failed to load roles');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };
  
  const handleRoleCreated = async (e: any) => {
    try {
      const role = e.data;
      await createRole(role);
      toast.success('Role created successfully');
      await loadRoles();
    } catch (error) {
      toast.error('Failed to create role');
      console.error(error);
      e.cancel = true;
    }
  };
  
  const handleRoleUpdated = async (e: any) => {
    try {
      const role = e.data;
      await updateRole(role.id, role);
      toast.success('Role updated successfully');
      await loadRoles();
    } catch (error) {
      toast.error('Failed to update role');
      console.error(error);
      e.cancel = true;
    }
  };
  
  const handleRoleDeleted = async (e: any) => {
    try {
      const result = await confirm('Are you sure you want to delete this role?', 'Confirm deletion');
      if (result) {
        await deleteRole(e.data.id);
        toast.success('Role deleted successfully');
        await loadRoles();
      } else {
        e.cancel = true;
      }
    } catch (error) {
      toast.error('Failed to delete role');
      console.error(error);
      e.cancel = true;
    }
  };
  
  const navigateToPermissions = (e: any) => {
    const roleId = e.row.data.id;
    history.push(`/roles/${roleId}/permissions`);
  };
  
  return (
    <div className="content-block">
      <h2>Role Management</h2>
      
      <DataGrid
        dataSource={roles}
        keyExpr="id"
        showBorders={true}
        loadPanel={{ enabled: loading }}
        onRowInserted={handleRoleCreated}
        onRowUpdated={handleRoleUpdated}
        onRowRemoved={handleRoleDeleted}
      >
        <Editing
          mode="popup"
          allowAdding={canEditRoles}
          allowUpdating={canEditRoles}
          allowDeleting={canEditRoles}
          useIcons={true}
        >
          <Popup title="Role Details" showTitle={true} width={700} height={525} />
          <Form>
            <Item dataField="name" editorOptions={{ disabled: e => e.row?.data?.id > 0 }} />
            <Item dataField="displayName" />
            <Item dataField="description" editorType="dxTextArea" editorOptions={{ height: 100 }} />
            <Item dataField="isSystemRole" editorType="dxCheckBox" />
          </Form>
        </Editing>
        
        <Column dataField="name" caption="Name" />
        <Column dataField="displayName" caption="Display Name" />
        <Column dataField="description" caption="Description" />
        <Column dataField="isSystemRole" caption="System Role" dataType="boolean" />
        <Column type="buttons">
          <Button name="edit" />
          <Button name="delete" />
          <Button
            hint="Manage Permissions"
            icon="key"
            visible={true}
            onClick={navigateToPermissions}
          />
        </Column>
      </DataGrid>
    </div>
  );
};

export default RoleManagement;
```

2. Add types for roles:
```typescript
// src/types/index.ts
export interface Role {
  id: number;
  name: string;
  displayName: string;
  description: string;
  isSystemRole: boolean;
}

export interface Permission {
  name: string;
  category: string;
  isGranted: boolean;
}

export interface RolePermissions {
  roleId: number;
  roleName: string;
  isSystemRole: boolean;
  permissions: Permission[];
}
```

3. Add the role management page to routes:
```typescript
// src/Routes.tsx
import React from 'react';
import { Switch, Route, Redirect } from 'react-router-dom';
import { ProtectedRoute } from './auth/ProtectedRoute';
import LoginPage from './pages/LoginPage';
import HomePage from './pages/HomePage';
import RoleManagement from './pages/RoleManagement';
import PermissionManagement from './pages/PermissionManagement';

const Routes: React.FC = () => {
  return (
    <Switch>
      <Route path="/login" component={LoginPage} />
      <ProtectedRoute exact path="/" component={HomePage} />
      <ProtectedRoute 
        path="/roles" 
        exact 
        component={RoleManagement} 
        requiredPermission="Roles.View" 
      />
      <ProtectedRoute 
        path="/roles/:id/permissions" 
        component={PermissionManagement} 
        requiredPermission="Roles.Edit" 
      />
      <Redirect to="/" />
    </Switch>
  );
};

export default Routes;
```

# Test Strategy:
1. Test role listing functionality
2. Verify role creation with validation
3. Test role editing, ensuring name cannot be changed
4. Verify role deletion with confirmation
5. Test navigation to permission management
6. Verify system role flag can be set/unset
7. Test authorization controls for edit operations
8. Verify error handling and notifications

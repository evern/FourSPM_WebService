{
  "tasks": [
    {
      "id": 1,
      "title": "Create Entity Framework Model for ROLE Table",
      "description": "Create and configure the Entity Framework model class for the ROLE table and integrate it into the FourSPMContext.",
      "details": "1. Create a new class named 'Role.cs' in the Models directory\n2. Implement the class with properties matching the database schema:\n```csharp\npublic class Role\n{\n    [Key]\n    public int GUID { get; set; }\n    \n    [Required]\n    [StringLength(50)]\n    public string NAME { get; set; }\n    \n    [Required]\n    [StringLength(100)]\n    public string DISPLAY_NAME { get; set; }\n    \n    [StringLength(500)]\n    public string DESCRIPTION { get; set; }\n    \n    [Required]\n    public bool IS_SYSTEM_ROLE { get; set; }\n    \n    [Required]\n    public DateTime CREATED { get; set; }\n    \n    [Required]\n    public string CREATEDBY { get; set; }\n    \n    public DateTime? UPDATED { get; set; }\n    \n    public string UPDATEDBY { get; set; }\n    \n    public DateTime? DELETED { get; set; }\n    \n    public string DELETEDBY { get; set; }\n}\n```\n3. Add DbSet to FourSPMContext:\n```csharp\npublic DbSet<Role> Roles { get; set; }\n```\n4. Configure entity in OnModelCreating method if needed:\n```csharp\nmodelBuilder.Entity<Role>()\n    .ToTable(\"ROLE\");\n```\n5. Ensure proper mapping of all properties with appropriate data annotations",
      "testStrategy": "1. Verify the Role class has all properties defined in the database schema\n2. Ensure proper data annotations are applied\n3. Confirm the DbSet is correctly added to FourSPMContext\n4. Run a database migration or update to verify the model maps correctly to the existing table\n5. Test basic CRUD operations through the DbContext to ensure the entity is properly configured",
      "priority": "high",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Implement OData Entity Model for Role",
      "description": "Create the RoleEntity class for OData representation and register it in the EDM model with proper property naming conventions.",
      "details": "1. Create a new class named 'RoleEntity.cs' in the appropriate OData entities directory\n2. Implement the class with PascalCase property naming:\n```csharp\npublic class RoleEntity\n{\n    public int Guid { get; set; }\n    public string Name { get; set; }\n    public string DisplayName { get; set; }\n    public string Description { get; set; }\n    public bool IsSystemRole { get; set; }\n    public DateTime Created { get; set; }\n    public string CreatedBy { get; set; }\n    public DateTime? Updated { get; set; }\n    public string UpdatedBy { get; set; }\n    public DateTime? Deleted { get; set; }\n    public string DeletedBy { get; set; }\n}\n```\n3. Create mapping methods between Role and RoleEntity:\n```csharp\npublic static RoleEntity ToEntity(this Role model)\n{\n    return new RoleEntity\n    {\n        Guid = model.GUID,\n        Name = model.NAME,\n        DisplayName = model.DISPLAY_NAME,\n        Description = model.DESCRIPTION,\n        IsSystemRole = model.IS_SYSTEM_ROLE,\n        Created = model.CREATED,\n        CreatedBy = model.CREATEDBY,\n        Updated = model.UPDATED,\n        UpdatedBy = model.UPDATEDBY,\n        Deleted = model.DELETED,\n        DeletedBy = model.DELETEDBY\n    };\n}\n\npublic static Role ToModel(this RoleEntity entity)\n{\n    return new Role\n    {\n        GUID = entity.Guid,\n        NAME = entity.Name,\n        DISPLAY_NAME = entity.DisplayName,\n        DESCRIPTION = entity.Description,\n        IS_SYSTEM_ROLE = entity.IsSystemRole,\n        CREATED = entity.Created,\n        CREATEDBY = entity.CreatedBy,\n        UPDATED = entity.Updated,\n        UPDATEDBY = entity.UpdatedBy,\n        DELETED = entity.Deleted,\n        DELETEDBY = entity.DeletedBy\n    };\n}\n```\n4. Register the entity in the EDM model builder:\n```csharp\npublic static IEdmModel GetEdmModel()\n{\n    var builder = new ODataConventionModelBuilder();\n    // Add existing entity sets\n    \n    // Add Role entity set\n    builder.EntitySet<RoleEntity>(\"Roles\");\n    \n    return builder.GetEdmModel();\n}\n```",
      "testStrategy": "1. Verify the RoleEntity class has all properties with correct PascalCase naming\n2. Test the mapping methods (ToEntity and ToModel) with sample data\n3. Confirm the entity is properly registered in the EDM model\n4. Verify OData metadata endpoint returns the Role entity definition\n5. Test basic OData queries against the entity to ensure proper serialization",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Create Role Repository Layer",
      "description": "Develop the repository layer for Role management including interface definition, implementation class with CRUD operations, and DI registration.",
      "details": "1. Create IRoleRepository interface:\n```csharp\npublic interface IRoleRepository\n{\n    Task<IEnumerable<Role>> GetAllAsync();\n    Task<Role> GetByIdAsync(int guid);\n    Task<Role> CreateAsync(Role role);\n    Task<Role> UpdateAsync(Role role);\n    Task<bool> DeleteAsync(int guid);\n    Task<bool> ExistsAsync(int guid);\n}\n```\n\n2. Implement RoleRepository class:\n```csharp\npublic class RoleRepository : IRoleRepository\n{\n    private readonly FourSPMContext _context;\n    \n    public RoleRepository(FourSPMContext context)\n    {\n        _context = context;\n    }\n    \n    public async Task<IEnumerable<Role>> GetAllAsync()\n    {\n        return await _context.Roles\n            .Where(r => r.DELETED == null)\n            .ToListAsync();\n    }\n    \n    public async Task<Role> GetByIdAsync(int guid)\n    {\n        return await _context.Roles\n            .FirstOrDefaultAsync(r => r.GUID == guid && r.DELETED == null);\n    }\n    \n    public async Task<Role> CreateAsync(Role role)\n    {\n        role.CREATED = DateTime.UtcNow;\n        _context.Roles.Add(role);\n        await _context.SaveChangesAsync();\n        return role;\n    }\n    \n    public async Task<Role> UpdateAsync(Role role)\n    {\n        var existingRole = await _context.Roles.FindAsync(role.GUID);\n        if (existingRole == null) return null;\n        \n        existingRole.NAME = role.NAME;\n        existingRole.DISPLAY_NAME = role.DISPLAY_NAME;\n        existingRole.DESCRIPTION = role.DESCRIPTION;\n        existingRole.IS_SYSTEM_ROLE = role.IS_SYSTEM_ROLE;\n        existingRole.UPDATED = DateTime.UtcNow;\n        existingRole.UPDATEDBY = role.UPDATEDBY;\n        \n        await _context.SaveChangesAsync();\n        return existingRole;\n    }\n    \n    public async Task<bool> DeleteAsync(int guid)\n    {\n        var role = await _context.Roles.FindAsync(guid);\n        if (role == null) return false;\n        \n        role.DELETED = DateTime.UtcNow;\n        await _context.SaveChangesAsync();\n        return true;\n    }\n    \n    public async Task<bool> ExistsAsync(int guid)\n    {\n        return await _context.Roles\n            .AnyAsync(r => r.GUID == guid && r.DELETED == null);\n    }\n}\n```\n\n3. Register the repository in the DI container (Startup.cs):\n```csharp\npublic void ConfigureServices(IServiceCollection services)\n{\n    // Existing service registrations\n    \n    services.AddScoped<IRoleRepository, RoleRepository>();\n}\n```",
      "testStrategy": "1. Create unit tests for each repository method using a test database or mock context\n2. Verify GetAllAsync returns only non-deleted roles\n3. Test CreateAsync sets the correct CREATED timestamp\n4. Confirm UpdateAsync properly updates only the allowed fields\n5. Verify DeleteAsync performs a soft delete by setting the DELETED timestamp\n6. Test ExistsAsync returns the correct boolean value\n7. Verify proper DI registration by resolving the repository in a test controller",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Implement Roles OData Controller",
      "description": "Create the RolesController with OData support, implementing all CRUD operations with proper error handling, validation, and authentication requirements.",
      "details": "1. Create RolesController class:\n```csharp\n[Authorize]\n[ApiController]\n[Route(\"api/[controller]\")]\n[EnableQuery]\npublic class RolesController : ODataController\n{\n    private readonly IRoleRepository _repository;\n    private readonly ILogger<RolesController> _logger;\n    \n    public RolesController(IRoleRepository repository, ILogger<RolesController> logger)\n    {\n        _repository = repository;\n        _logger = logger;\n    }\n    \n    [HttpGet]\n    public async Task<IActionResult> Get()\n    {\n        try\n        {\n            var roles = await _repository.GetAllAsync();\n            return Ok(roles.Select(r => r.ToEntity()));\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error retrieving roles\");\n            return StatusCode(500, \"Internal server error\");\n        }\n    }\n    \n    [HttpGet(\"{guid}\")]\n    public async Task<IActionResult> Get(int guid)\n    {\n        try\n        {\n            var role = await _repository.GetByIdAsync(guid);\n            if (role == null) return NotFound();\n            \n            return Ok(role.ToEntity());\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, $\"Error retrieving role {guid}\");\n            return StatusCode(500, \"Internal server error\");\n        }\n    }\n    \n    [HttpPost]\n    public async Task<IActionResult> Post([FromBody] RoleEntity roleEntity)\n    {\n        if (!ModelState.IsValid)\n            return BadRequest(ModelState);\n            \n        try\n        {\n            var role = roleEntity.ToModel();\n            role.CREATEDBY = User.Identity.Name;\n            \n            var result = await _repository.CreateAsync(role);\n            return Created($\"api/roles/{result.GUID}\", result.ToEntity());\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating role\");\n            return StatusCode(500, \"Internal server error\");\n        }\n    }\n    \n    [HttpPut(\"{guid}\")]\n    public async Task<IActionResult> Put(int guid, [FromBody] RoleEntity roleEntity)\n    {\n        if (guid != roleEntity.Guid)\n            return BadRequest(\"GUID mismatch\");\n            \n        if (!ModelState.IsValid)\n            return BadRequest(ModelState);\n            \n        try\n        {\n            var exists = await _repository.ExistsAsync(guid);\n            if (!exists) return NotFound();\n            \n            var role = roleEntity.ToModel();\n            role.UPDATEDBY = User.Identity.Name;\n            \n            var result = await _repository.UpdateAsync(role);\n            return Ok(result.ToEntity());\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, $\"Error updating role {guid}\");\n            return StatusCode(500, \"Internal server error\");\n        }\n    }\n    \n    [HttpDelete(\"{guid}\")]\n    public async Task<IActionResult> Delete(int guid)\n    {\n        try\n        {\n            var exists = await _repository.ExistsAsync(guid);\n            if (!exists) return NotFound();\n            \n            var role = await _repository.GetByIdAsync(guid);\n            role.DELETEDBY = User.Identity.Name;\n            \n            var result = await _repository.DeleteAsync(guid);\n            return Ok(result);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, $\"Error deleting role {guid}\");\n            return StatusCode(500, \"Internal server error\");\n        }\n    }\n}\n```\n\n2. Add OData route configuration in Startup.cs:\n```csharp\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n    // Existing configuration\n    \n    app.UseEndpoints(endpoints =>\n    {\n        // Existing endpoints\n        \n        endpoints.MapODataRoute(\"odata\", \"odata\", GetEdmModel());\n        endpoints.EnableDependencyInjection();\n    });\n}\n```",
      "testStrategy": "1. Test each endpoint (GET, POST, PUT, DELETE) with valid inputs\n2. Verify authentication is required for all endpoints\n3. Test error handling with invalid inputs\n4. Verify OData query parameters work correctly (e.g., $filter, $select, $expand)\n5. Test validation logic for required fields\n6. Verify proper HTTP status codes are returned for different scenarios\n7. Test that user information is correctly captured in CREATEDBY, UPDATEDBY, and DELETEDBY fields\n8. Verify soft delete functionality works as expected",
      "priority": "medium",
      "dependencies": [
        2,
        3
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}
# Task ID: 10
# Title: Implement Permission Management UI
# Status: pending
# Dependencies: 5, 6, 8, 9
# Priority: medium
# Description: Create a UI for managing permissions assigned to roles, with permissions grouped by category and support for system roles.
# Details:
1. Create Permission management page:
```tsx
// src/pages/PermissionManagement.tsx
import React, { useEffect, useState } from 'react';
import { useParams, useHistory } from 'react-router-dom';
import { Button } from 'devextreme-react/button';
import { CheckBox } from 'devextreme-react/check-box';
import { getRolePermissions, updateRolePermissions } from '../api/roleService';
import { Permission, RolePermissions } from '../types';
import { toast } from 'react-toastify';

interface PermissionGrouped {
  category: string;
  permissions: Permission[];
}

const PermissionManagement: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const history = useHistory();
  const [rolePermissions, setRolePermissions] = useState<RolePermissions | null>(null);
  const [groupedPermissions, setGroupedPermissions] = useState<PermissionGrouped[]>([]);
  const [loading, setLoading] = useState(true);
  
  useEffect(() => {
    loadPermissions();
  }, [id]);
  
  const loadPermissions = async () => {
    try {
      setLoading(true);
      const data = await getRolePermissions(parseInt(id));
      setRolePermissions(data);
      
      // Group permissions by category
      const grouped = data.permissions.reduce((groups: PermissionGrouped[], permission) => {
        const category = permission.category;
        const group = groups.find(g => g.category === category);
        
        if (group) {
          group.permissions.push(permission);
        } else {
          groups.push({
            category,
            permissions: [permission]
          });
        }
        
        return groups;
      }, []);
      
      setGroupedPermissions(grouped);
    } catch (error) {
      toast.error('Failed to load permissions');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };
  
  const handlePermissionChange = (permission: Permission, value: boolean) => {
    if (!rolePermissions) return;
    
    const updatedPermissions = rolePermissions.permissions.map(p => {
      if (p.name === permission.name) {
        return { ...p, isGranted: value };
      }
      
      // If granting an edit permission, automatically grant the corresponding view permission
      if (value && permission.name.endsWith('.Edit') && 
          p.name === permission.name.replace('.Edit', '.View')) {
        return { ...p, isGranted: true };
      }
      
      return p;
    });
    
    setRolePermissions({
      ...rolePermissions,
      permissions: updatedPermissions
    });
    
    // Update grouped permissions
    const updatedGroups = groupedPermissions.map(group => ({
      ...group,
      permissions: group.permissions.map(p => {
        const updatedPerm = updatedPermissions.find(up => up.name === p.name);
        return updatedPerm || p;
      })
    }));
    
    setGroupedPermissions(updatedGroups);
  };
  
  const handleSave = async () => {
    if (!rolePermissions) return;
    
    try {
      const permissionsToSave = rolePermissions.permissions
        .filter(p => p.isGranted)
        .map(p => p.name);
      
      await updateRolePermissions(rolePermissions.roleId, permissionsToSave);
      toast.success('Permissions updated successfully');
      history.push('/roles');
    } catch (error) {
      toast.error('Failed to update permissions');
      console.error(error);
    }
  };
  
  const handleCancel = () => {
    history.push('/roles');
  };
  
  if (loading) {
    return <div>Loading...</div>;
  }
  
  if (!rolePermissions) {
    return <div>Role not found</div>;
  }
  
  return (
    <div className="content-block">
      <h2>Permissions for {rolePermissions.roleName}</h2>
      
      {rolePermissions.isSystemRole && (
        <div className="system-role-notice">
          This is a system role. System roles automatically have all permissions.
        </div>
      )}
      
      <div className="permissions-container">
        {groupedPermissions.map(group => (
          <div key={group.category} className="permission-group">
            <h3>{group.category}</h3>
            <div className="permission-list">
              {group.permissions.map(permission => (
                <div key={permission.name} className="permission-item">
                  <CheckBox
                    value={permission.isGranted || rolePermissions.isSystemRole}
                    onValueChanged={e => handlePermissionChange(permission, e.value)}
                    disabled={rolePermissions.isSystemRole}
                    text={permission.name.split('.')[1]}
                  />
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
      
      <div className="button-container">
        <Button
          text="Save"
          type="success"
          onClick={handleSave}
          disabled={rolePermissions.isSystemRole}
        />
        <Button
          text="Cancel"
          onClick={handleCancel}
        />
      </div>
    </div>
  );
};

export default PermissionManagement;
```

2. Add styles for permission management:
```css
/* src/styles/PermissionManagement.css */
.permissions-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  margin-top: 20px;
}

.permission-group {
  flex: 1 1 300px;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 15px;
  background-color: #f9f9f9;
}

.permission-group h3 {
  margin-top: 0;
  padding-bottom: 10px;
  border-bottom: 1px solid #eee;
}

.permission-list {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: 10px;
}

.permission-item {
  display: flex;
  align-items: center;
}

.system-role-notice {
  background-color: #fff3cd;
  color: #856404;
  padding: 10px 15px;
  border-radius: 4px;
  margin-bottom: 20px;
  border: 1px solid #ffeeba;
}

.button-container {
  display: flex;
  gap: 10px;
  margin-top: 20px;
  justify-content: flex-end;
}
```

# Test Strategy:
1. Test loading permissions for a role
2. Verify permissions are correctly grouped by category
3. Test toggling permissions on and off
4. Verify view permission is automatically granted when edit permission is selected
5. Test saving permission changes
6. Verify system roles show all permissions as granted and disabled
7. Test navigation back to roles page
8. Verify error handling and notifications

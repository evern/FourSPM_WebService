# Task ID: 10
# Title: Create Authentication Documentation
# Status: pending
# Dependencies: 1, 2, 3, 4, 5, 6, 7, 8, 9
# Priority: low
# Description: Document the authentication flow, configuration, and usage for both authentication methods
# Details:
1. Create comprehensive documentation for the dual authentication system
2. Document the authentication flow for both methods
3. Provide configuration instructions
4. Include examples of using authentication in the application
5. Document the role and permission system

Documentation should include:

```markdown
# FourSPM_WebService Authentication Documentation

## Overview
This document describes the authentication system for FourSPM_WebService, which supports both Microsoft Authentication Library (MSAL) and legacy authentication methods.

## Authentication Methods

### MSAL Authentication
MSAL authentication uses Azure AD for identity management and provides modern authentication features.

#### Configuration
- Azure AD Application ID: c67bf91d-8b6a-494a-8b99-c7a4592e08c1
- Redirect URLs: [List configured redirect URLs]
- API Scopes: Application.Admin and Application.User
- Authentication Type: Organization-only

#### Authentication Flow
1. User authenticates with Azure AD
2. Azure AD issues a JWT token
3. Token is validated by the application
4. User's roles and permissions are determined from the database
5. User is granted access based on their roles and permissions

### Legacy Authentication
Legacy authentication uses the existing authentication system and is maintained for backward compatibility.

#### Authentication Flow
1. User authenticates using the legacy system
2. Legacy system issues a JWT token
3. Token is validated by the application
4. User's roles and permissions are determined from the database
5. User is granted access based on their roles and permissions

## Configuration

### appsettings.json
```json
{
  "AzureAd": {
    "Instance": "https://login.microsoftonline.com/",
    "TenantId": "your-tenant-id",
    "ClientId": "c67bf91d-8b6a-494a-8b99-c7a4592e08c1",
    "Authority": "https://login.microsoftonline.com/your-tenant-id"
  },
  "LegacyAuth": {
    "Issuer": "your-legacy-issuer",
    "Audience": "your-legacy-audience",
    "SecretKey": "your-legacy-secret-key"
  }
}
```

## Role-Based Authorization

### Roles and Permissions
The application uses a role-based authorization system with the following components:
- ROLE table: Defines the available roles
- ROLE_PERMISSION table: Maps roles to permissions
- User roles are assigned in the database

### Authorization Policies
The following authorization policies are available:
- RequireAdminRole: Requires the "Admin" role
- RequireUserRole: Requires the "User" role
- CanManageUsers: Requires the "users.manage" permission
- CanViewReports: Requires the "reports.view" permission
- RequireAdminScope: Requires the MSAL "Application.Admin" scope

### Using Authorization in Controllers
```csharp
[Authorize(Policy = "CanManageUsers")]
public IActionResult ProtectedEndpoint()
{
    // Only accessible to users with the "users.manage" permission
}
```

## Troubleshooting

### Common Issues
- Token validation failures: Check that the token is valid and has not expired
- Missing roles or permissions: Check the database to ensure the user has the required roles
- MSAL configuration issues: Verify the Azure AD configuration in appsettings.json

### Logging
Authentication events are logged using the standard logging system. Check the logs for detailed error information.
```

Additional documentation should include:
1. Sequence diagrams for authentication flows
2. Database schema for roles and permissions
3. API documentation for authentication endpoints
4. Examples of client-side integration
5. Security best practices

# Test Strategy:
1. Review documentation for completeness and accuracy
2. Verify that all authentication flows are correctly documented
3. Ensure that configuration instructions are clear and complete
4. Check that examples are correct and follow best practices
5. Validate that troubleshooting information is helpful and accurate
6. Have team members review the documentation for clarity and usability

{
  "tasks": [
    {
      "id": 1,
      "title": "Install Authentication Packages",
      "description": "Add Microsoft.Identity.Web and related NuGet packages to the ASP.NET Core project to enable Azure AD authentication.",
      "details": "Install the following NuGet packages:\n1. Microsoft.Identity.Web\n2. Microsoft.Identity.Web.UI (if UI components are needed)\n3. Microsoft.AspNetCore.Authentication.JwtBearer\n\nCommand line installation:\n```\ndotnet add package Microsoft.Identity.Web\ndotnet add package Microsoft.AspNetCore.Authentication.JwtBearer\n```\n\nEnsure package versions are compatible with the current ASP.NET Core version used in the project.",
      "testStrategy": "Verify successful package installation by checking the project's .csproj file for the added package references. Ensure there are no version conflicts with existing packages.",
      "priority": "high",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Configure Azure AD Settings in appsettings.json",
      "description": "Set up Azure AD configuration settings in appsettings.json with environment-specific configurations.",
      "details": "Create an 'AzureAd' section in appsettings.json with the following structure:\n\n```json\n{\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"Domain\": \"yourdomain.onmicrosoft.com\",\n    \"TenantId\": \"your-tenant-id\",\n    \"ClientId\": \"your-client-id\",\n    \"CallbackPath\": \"/signin-oidc\",\n    \"SignedOutCallbackPath\": \"/signout-callback-oidc\"\n  }\n}\n```\n\nCreate environment-specific settings in appsettings.Development.json and appsettings.Production.json with appropriate values. Use user secrets or Azure Key Vault for storing sensitive information in development and production environments respectively.",
      "testStrategy": "Validate configuration file structure. Ensure sensitive information is not committed to source control. Verify environment-specific configurations load correctly by running the application in different environments.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Configure JWT Bearer Authentication",
      "description": "Configure JWT Bearer authentication in the application to validate tokens issued by Azure AD.",
      "details": "Update Program.cs to configure JWT Bearer authentication:\n\n```csharp\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApi(builder.Configuration.GetSection(\"AzureAd\"));\n\n// Add authorization services\nbuilder.Services.AddAuthorization();\n\n// In the app configuration section\napp.UseAuthentication();\napp.UseAuthorization();\n```\n\nConfigure token validation parameters to validate issuer, audience, lifetime, and signature:\n\n```csharp\nbuilder.Services.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme, options =>\n{\n    options.TokenValidationParameters.ValidateIssuer = true;\n    options.TokenValidationParameters.ValidateAudience = true;\n    options.TokenValidationParameters.ValidateLifetime = true;\n    options.TokenValidationParameters.ValidateIssuerSigningKey = true;\n});\n```",
      "testStrategy": "Create unit tests to verify authentication configuration. Test with valid and invalid tokens to ensure proper validation. Verify that unauthenticated requests to protected endpoints return 401 Unauthorized responses.",
      "priority": "high",
      "dependencies": [
        1,
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Implement Token Validation Helpers",
      "description": "Create helper methods to validate and extract claims from Azure AD tokens.",
      "details": "Create a TokenValidationService class to handle token validation and claims extraction:\n\n```csharp\npublic class TokenValidationService\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public TokenValidationService(IHttpContextAccessor httpContextAccessor)\n    {\n        _httpContextAccessor = httpContextAccessor;\n    }\n\n    public ClaimsPrincipal GetCurrentUser()\n    {\n        return _httpContextAccessor.HttpContext?.User;\n    }\n\n    public string GetUserObjectId()\n    {\n        var objectIdClaim = _httpContextAccessor.HttpContext?.User.FindFirst(\"http://schemas.microsoft.com/identity/claims/objectidentifier\");\n        return objectIdClaim?.Value;\n    }\n\n    public IEnumerable<string> GetUserRoles()\n    {\n        var roles = _httpContextAccessor.HttpContext?.User.Claims\n            .Where(c => c.Type == ClaimTypes.Role)\n            .Select(c => c.Value);\n        return roles ?? Enumerable.Empty<string>();\n    }\n}\n```\n\nRegister the service in Program.cs:\n\n```csharp\nbuilder.Services.AddHttpContextAccessor();\nbuilder.Services.AddScoped<TokenValidationService>();\n```",
      "testStrategy": "Write unit tests for the TokenValidationService using mocked HttpContext with various claims configurations. Test each method with valid and invalid/missing claims scenarios.",
      "priority": "medium",
      "dependencies": [
        3
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Implement Role-Based Access Control",
      "description": "Configure role-based access control to restrict API access based on user roles defined in Azure AD.",
      "details": "Configure role claim mapping in Program.cs:\n\n```csharp\nbuilder.Services.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme, options =>\n{\n    options.TokenValidationParameters.RoleClaimType = \"roles\";\n});\n```\n\nImplement role-based authorization in controllers:\n\n```csharp\n// Controller or action level\n[Authorize(Roles = \"Admin,Manager\")]\npublic class AdminController : ControllerBase\n{\n    // Controller actions\n}\n\n// Or at the action level\n[Authorize(Roles = \"User\")]\npublic IActionResult GetUserData()\n{\n    // Action implementation\n}\n```\n\nEnsure Azure AD app registration has the appropriate app roles defined and assigned to users/groups.",
      "testStrategy": "Test authorization with users having different roles. Verify users with appropriate roles can access endpoints while those without required roles receive 403 Forbidden responses. Create integration tests that use test tokens with different role claims.",
      "priority": "high",
      "dependencies": [
        3,
        4
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Implement Policy-Based Authorization",
      "description": "Configure policy-based authorization for more complex access control scenarios.",
      "details": "Define authorization policies in Program.cs:\n\n```csharp\nbuilder.Services.AddAuthorization(options =>\n{\n    options.AddPolicy(\"RequireAdminRole\", policy =>\n        policy.RequireRole(\"Admin\"));\n        \n    options.AddPolicy(\"RequireSpecificScope\", policy =>\n        policy.RequireClaim(\"http://schemas.microsoft.com/identity/claims/scope\", \"api.access\"));\n        \n    options.AddPolicy(\"RequireDepartment\", policy =>\n        policy.RequireClaim(\"department\", \"IT\", \"HR\"));\n});\n```\n\nUse policies in controllers:\n\n```csharp\n[Authorize(Policy = \"RequireAdminRole\")]\npublic IActionResult AdminAction()\n{\n    // Implementation\n}\n\n[Authorize(Policy = \"RequireSpecificScope\")]\npublic IActionResult ScopedAction()\n{\n    // Implementation\n}\n```\n\nImplement custom authorization requirements if needed:\n\n```csharp\npublic class MinimumAgeRequirement : IAuthorizationRequirement\n{\n    public int MinimumAge { get; }\n    \n    public MinimumAgeRequirement(int minimumAge)\n    {\n        MinimumAge = minimumAge;\n    }\n}\n\npublic class MinimumAgeHandler : AuthorizationHandler<MinimumAgeRequirement>\n{\n    protected override Task HandleRequirementAsync(AuthorizationHandlerContext context, MinimumAgeRequirement requirement)\n    {\n        // Implementation\n    }\n}\n```",
      "testStrategy": "Create unit tests for each policy with various claim combinations. Test custom authorization handlers with mocked authorization contexts. Verify that policies correctly allow or deny access based on the defined requirements.",
      "priority": "medium",
      "dependencies": [
        5
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Implement Scope Validation for API Endpoints",
      "description": "Configure and implement OAuth 2.0 scope validation for API endpoints to ensure clients have the required permissions.",
      "details": "Configure scope validation in Program.cs:\n\n```csharp\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApi(builder.Configuration.GetSection(\"AzureAd\"), jwtBearerOptions =>\n    {\n        jwtBearerOptions.Events = new JwtBearerEvents\n        {\n            OnTokenValidated = context =>\n            {\n                // Extract scopes from the token\n                var requiredScope = \"api.access\";\n                var scopeClaim = context.Principal.FindFirst(\"http://schemas.microsoft.com/identity/claims/scope\");\n                if (scopeClaim == null || !scopeClaim.Value.Split(' ').Contains(requiredScope))\n                {\n                    context.Fail(\"Required scope not present in token\");\n                }\n                return Task.CompletedTask;\n            }\n        };\n    });\n```\n\nCreate a custom attribute for scope validation:\n\n```csharp\n[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]\npublic class RequireScopeAttribute : AuthorizeAttribute\n{\n    public RequireScopeAttribute(string scope)\n    {\n        Policy = $\"RequireScope:{scope}\";\n    }\n}\n\n// Register scope policies\nbuilder.Services.AddAuthorization(options =>\n{\n    options.AddPolicy(\"RequireScope:api.read\", policy =>\n        policy.RequireClaim(\"http://schemas.microsoft.com/identity/claims/scope\", \"api.read\"));\n    options.AddPolicy(\"RequireScope:api.write\", policy =>\n        policy.RequireClaim(\"http://schemas.microsoft.com/identity/claims/scope\", \"api.write\"));\n});\n```\n\nUse the attribute on controllers or actions:\n\n```csharp\n[RequireScope(\"api.read\")]\npublic IActionResult GetData()\n{\n    // Implementation\n}\n\n[RequireScope(\"api.write\")]\npublic IActionResult UpdateData()\n{\n    // Implementation\n}\n```",
      "testStrategy": "Test API endpoints with tokens containing different scopes. Verify that requests with missing required scopes are rejected. Create integration tests that simulate client applications with various permission levels.",
      "priority": "medium",
      "dependencies": [
        3,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Create Authentication Middleware",
      "description": "Implement custom authentication middleware to handle token validation and error responses.",
      "details": "Create a custom authentication middleware class:\n\n```csharp\npublic class AuthenticationMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<AuthenticationMiddleware> _logger;\n\n    public AuthenticationMiddleware(RequestDelegate next, ILogger<AuthenticationMiddleware> logger)\n    {\n        _next = next;\n        _logger = logger;\n    }\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (SecurityTokenExpiredException ex)\n        {\n            _logger.LogWarning(ex, \"Token expired\");\n            context.Response.StatusCode = 401;\n            context.Response.ContentType = \"application/json\";\n            await context.Response.WriteAsJsonAsync(new { error = \"Token expired\", message = \"Authentication token has expired\" });\n        }\n        catch (SecurityTokenValidationException ex)\n        {\n            _logger.LogWarning(ex, \"Token validation failed\");\n            context.Response.StatusCode = 401;\n            context.Response.ContentType = \"application/json\";\n            await context.Response.WriteAsJsonAsync(new { error = \"Invalid token\", message = \"Authentication token validation failed\" });\n        }\n    }\n}\n\n// Extension method for easy registration\npublic static class AuthenticationMiddlewareExtensions\n{\n    public static IApplicationBuilder UseCustomAuthentication(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<AuthenticationMiddleware>();\n    }\n}\n```\n\nRegister the middleware in Program.cs:\n\n```csharp\napp.UseAuthentication();\napp.UseCustomAuthentication();\napp.UseAuthorization();\n```",
      "testStrategy": "Create unit tests for the middleware with mocked HttpContext and various exception scenarios. Test the middleware's error handling by simulating different token validation exceptions. Verify appropriate status codes and response formats are returned.",
      "priority": "medium",
      "dependencies": [
        3,
        4
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Update OData Controllers with Authentication",
      "description": "Update existing OData controllers to use Azure AD authentication and authorization.",
      "details": "Apply authentication and authorization attributes to OData controllers:\n\n```csharp\n[Authorize]\n[Route(\"api/[controller]\")]\npublic class ProductsController : ODataController\n{\n    private readonly TokenValidationService _tokenService;\n    \n    public ProductsController(TokenValidationService tokenService)\n    {\n        _tokenService = tokenService;\n    }\n    \n    [HttpGet]\n    [Authorize(Roles = \"Reader,Admin\")]\n    public IActionResult Get()\n    {\n        var userId = _tokenService.GetUserObjectId();\n        // Implementation\n    }\n    \n    [HttpPost]\n    [Authorize(Roles = \"Admin\")]\n    [RequireScope(\"api.write\")]\n    public IActionResult Post([FromBody] Product product)\n    {\n        // Implementation\n    }\n}\n```\n\nUpdate OData configuration to respect authorization:\n\n```csharp\nbuilder.Services.AddControllers()\n    .AddOData(options =>\n    {\n        options.Select().Filter().OrderBy().Expand().Count().SetMaxTop(100);\n        options.AddRouteComponents(\"api\", GetEdmModel());\n    });\n```\n\nEnsure OData routes are protected:\n\n```csharp\napp.MapControllers();\napp.MapODataRoute(\"odata\", \"api\", GetEdmModel())\n   .RequireAuthorization();\n```",
      "testStrategy": "Test OData endpoints with authenticated and unauthenticated requests. Verify that endpoints enforce role and scope requirements. Create integration tests that simulate different user roles accessing OData endpoints.",
      "priority": "high",
      "dependencies": [
        3,
        5,
        6,
        7
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Update OData Controllers with Authentication/Authorization Attributes",
          "description": "Decorate all OData controllers with appropriate authentication and authorization attributes (e.g., [Authorize], custom attributes for roles or scopes) to ensure only authenticated and authorized users can access endpoints.",
          "dependencies": [],
          "details": "Apply attributes such as [Authorize] or custom authorization attributes to each OData controller and, if needed, to specific actions. Ensure attributes reflect required roles or policies for each endpoint.",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "Integrate TokenValidationService",
          "description": "Integrate a TokenValidationService into the authentication pipeline to validate incoming tokens and extract claims for authorization decisions.",
          "dependencies": [
            1
          ],
          "details": "Configure the TokenValidationService in the DI container and ensure it is used by the authentication middleware to validate tokens and populate the user principal with claims.",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "Update OData Configuration to Enforce Authorization",
          "description": "Modify the OData configuration to ensure authorization is enforced at the middleware and routing level, including adding OData authorization services and policies.",
          "dependencies": [
            2
          ],
          "details": "Update OData route registration to include authorization middleware and configure OData-specific authorization options, such as scopes or policies, as needed.",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "Protect OData Routes",
          "description": "Ensure all OData routes are protected by the configured authentication and authorization mechanisms, preventing unauthorized access to any OData endpoint.",
          "dependencies": [
            3
          ],
          "details": "Verify that all OData endpoints, including metadata and entity sets, require authentication and authorization, and that no route is left unprotected.",
          "status": "pending"
        },
        {
          "id": 5,
          "title": "Create Integration Tests for OData Endpoints",
          "description": "Develop integration tests to verify that OData endpoints enforce authentication and authorization correctly, including tests for both authorized and unauthorized access.",
          "dependencies": [
            4
          ],
          "details": "Write tests that attempt to access OData endpoints with and without valid tokens, and with different roles/scopes, to ensure security is enforced as expected.",
          "status": "pending"
        }
      ]
    },
    {
      "id": 10,
      "title": "Implement End-to-End Testing",
      "description": "Create comprehensive end-to-end tests to validate the Azure AD authentication integration.",
      "details": "Create an integration test project:\n\n```csharp\npublic class AuthenticationIntegrationTests : IClassFixture<WebApplicationFactory<Program>>\n{\n    private readonly WebApplicationFactory<Program> _factory;\n    private readonly HttpClient _client;\n\n    public AuthenticationIntegrationTests(WebApplicationFactory<Program> factory)\n    {\n        _factory = factory.WithWebHostBuilder(builder =>\n        {\n            builder.ConfigureAppConfiguration((context, config) =>\n            {\n                // Use test configuration\n                config.AddInMemoryCollection(new Dictionary<string, string>\n                {\n                    [\"AzureAd:TenantId\"] = \"test-tenant-id\",\n                    [\"AzureAd:ClientId\"] = \"test-client-id\"\n                });\n            });\n            \n            builder.ConfigureTestServices(services =>\n            {\n                // Mock authentication services for testing\n                services.AddAuthentication(\"Test\")\n                    .AddScheme<AuthenticationSchemeOptions, TestAuthHandler>(\"Test\", options => { });\n            });\n        });\n        \n        _client = _factory.CreateClient();\n    }\n\n    [Fact]\n    public async Task Unauthenticated_Request_Returns_401()\n    {\n        // Arrange\n        _client.DefaultRequestHeaders.Authorization = null;\n        \n        // Act\n        var response = await _client.GetAsync(\"/api/products\");\n        \n        // Assert\n        Assert.Equal(HttpStatusCode.Unauthorized, response.StatusCode);\n    }\n\n    [Fact]\n    public async Task Authenticated_Admin_Can_Access_Protected_Endpoint()\n    {\n        // Arrange\n        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", GenerateTestToken(\"admin\"));\n        \n        // Act\n        var response = await _client.GetAsync(\"/api/products\");\n        \n        // Assert\n        Assert.Equal(HttpStatusCode.OK, response.StatusCode);\n    }\n\n    private string GenerateTestToken(string role)\n    {\n        // Generate a test token with appropriate claims\n        // Implementation details\n    }\n}\n\n// Test authentication handler\npublic class TestAuthHandler : AuthenticationHandler<AuthenticationSchemeOptions>\n{\n    public TestAuthHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock)\n        : base(options, logger, encoder, clock)\n    {\n    }\n\n    protected override Task<AuthenticateResult> HandleAuthenticateAsync()\n    {\n        // Parse the token from Authorization header and create claims principal\n        // Implementation details\n    }\n}\n```",
      "testStrategy": "Run integration tests against a test instance of the application. Test various authentication and authorization scenarios including valid/invalid tokens, different roles, and scopes. Verify that all endpoints enforce the expected security requirements.",
      "priority": "medium",
      "dependencies": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}
# Task ID: 1
# Title: Update Startup.cs for MSAL Configuration
# Status: done
# Dependencies: None
# Priority: high
# Description: Modify the Startup.cs file to configure MSAL authentication alongside existing authentication methods
# Details:
1. Install required NuGet packages: Microsoft.Identity.Web and Microsoft.Identity.Web.UI
2. Update ConfigureServices method to add MSAL support:
```csharp
public void ConfigureServices(IServiceCollection services)
{
    // Existing authentication configuration
    
    // Add MSAL support
    services.AddMicrosoftIdentityWebApiAuthentication(Configuration, "AzureAd");
    
    // Configure JWT options to support both auth methods
    services.Configure<JwtBearerOptions>(JwtBearerDefaults.AuthenticationScheme, options =>
    {
        // Existing JWT configuration
        
        // Add event handlers for MSAL token validation
        options.Events = new JwtBearerEvents
        {
            OnTokenValidated = async context => 
            {
                // Token validation logic will be implemented in AuthService
                var authService = context.HttpContext.RequestServices.GetRequiredService<IAuthService>();
                await authService.ValidateTokenAsync(context);
            }
        };
    });
}
```
3. Update appsettings.json to include MSAL configuration:
```json
{
  "AzureAd": {
    "Instance": "https://login.microsoftonline.com/",
    "TenantId": "your-tenant-id",
    "ClientId": "c67bf91d-8b6a-494a-8b99-c7a4592e08c1",
    "CallbackPath": "/signin-oidc"
  },
  // Existing configuration
}
```

# Test Strategy:
1. Verify that the application builds successfully after the changes
2. Ensure that the application starts without errors
3. Check that both authentication configurations are loaded correctly
4. Verify that the JWT bearer options are configured correctly
5. Use logging to confirm the configuration is loaded as expected

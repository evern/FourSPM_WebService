# Task ID: 2
# Title: Implement Entity Framework Models for Role and Permission
# Status: done
# Dependencies: None
# Priority: high
# Description: Create Entity Framework models for the ROLE and ROLE_PERMISSION tables with appropriate relationships and configurations.
# Details:
1. Create Role entity class:
```csharp
public class Role
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string DisplayName { get; set; }
    public string Description { get; set; }
    public bool IsSystemRole { get; set; }
    
    // Navigation property
    public virtual ICollection<RolePermission> RolePermissions { get; set; }
}
```

2. Create RolePermission entity class:
```csharp
public class RolePermission
{
    public int Id { get; set; }
    public int RoleId { get; set; }
    public string Permission { get; set; }
    
    // Navigation property
    public virtual Role Role { get; set; }
}
```

3. Configure entities in DbContext:
```csharp
public class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    { }
    
    public DbSet<Role> Roles { get; set; }
    public DbSet<RolePermission> RolePermissions { get; set; }
    
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        
        modelBuilder.Entity<Role>(entity =>
        {
            entity.ToTable("ROLE");
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Name).IsRequired().HasMaxLength(50);
            entity.Property(e => e.DisplayName).IsRequired().HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.IsSystemRole).HasDefaultValue(false);
        });
        
        modelBuilder.Entity<RolePermission>(entity =>
        {
            entity.ToTable("ROLE_PERMISSION");
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Permission).IsRequired().HasMaxLength(100);
            
            entity.HasOne(d => d.Role)
                  .WithMany(p => p.RolePermissions)
                  .HasForeignKey(d => d.RoleId);
        });
    }
}
```

# Test Strategy:
1. Verify entity models map correctly to database tables
2. Test navigation properties work as expected
3. Validate constraints and relationships
4. Create unit tests for CRUD operations using in-memory database
5. Ensure proper mapping between C# properties and database columns
